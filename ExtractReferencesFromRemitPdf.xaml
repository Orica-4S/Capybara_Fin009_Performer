<Activity mc:Ignorable="sap sap2010" x:Class="Main" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:upap="clr-namespace:UiPath.PDF.Activities.PDF;assembly=UiPath.PDF.Activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_strPdfPath" Type="InArgument(x:String)" />
    <x:Property Name="in_strCustomerCode" Type="InArgument(x:String)" />
    <x:Property Name="in_strCompanyCode" Type="InArgument(x:String)" />
    <x:Property Name="out_dt_References" Type="OutArgument(sd:DataTable)" />
    <x:Property Name="out_NoOfPages" Type="OutArgument(x:Int32)" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1240,1977</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="34">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>UiPath.PDF.Activities</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>UiPath.PDF.Activities.PDF</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="50">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.PDF.Activities</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Text.RegularExpressions</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="[Workflow Name]:-&#xA;ExtractReferencesFromRemitPdf&#xA;&#xA;[Description]:-&#xA;This workflow will extract Reference Numbers from Remit PDF.&#xA;Enitre workflow is enclosed in try catch, in case of exceptions, a appropriate message will be logged and error will be rethrown to the calling workflow.&#xA;&#xA;[Config values]:-&#xA;&#xA;[Input]:-&#xA;in_strPdfPath - String containing Full File Path of the downloaded File.&#xA;in_strCompanyCode - String containing Company Code.&#xA;in_strCustomerCode - String containing Customer Code.&#xA;&#xA;[Output]:-&#xA;out_NoOfPages - Integer containing Page count of PDF.&#xA;out_dt_References - DataTable containing Remit References Information.&#xA;&#xA;[Remarks]:- &#xA;In case of any errors the workflow will capture the error,log custom message  and rethrow the error." DisplayName="ExtractReferencesFromRemitPdf" sap:VirtualizedContainerService.HintSize="462,1912" sap2010:WorkflowViewState.IdRef="Sequence_2">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="strPdfData" />
      <Variable x:TypeArguments="x:String" Name="strExtractedData" />
      <Variable x:TypeArguments="x:String" Name="strTemp" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="400,92" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;Started ExtractReferencesFromRemitPdf workflow&quot;]" />
    <Sequence sap2010:Annotation.AnnotationText="Read PDF data and get Page Count" DisplayName="Extract PDF Data" sap:VirtualizedContainerService.HintSize="400,302" sap2010:WorkflowViewState.IdRef="Sequence_1">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:ReadPDFText PreserveFormatting="{x:Null}" DisplayName="Read PDF Text" FileName="[in_strPdfPath]" sap:VirtualizedContainerService.HintSize="338,60" sap2010:WorkflowViewState.IdRef="ReadPDFText_1" Range="All" Text="[strPdfData]" />
      <upap:GetPDFPageCount DisplayName="Get PDF Page Count" FileName="[in_strPdfPath]" sap:VirtualizedContainerService.HintSize="338,60" sap2010:WorkflowViewState.IdRef="GetPDFPageCount_2" PageCount="[out_NoOfPages]" />
    </Sequence>
    <Assign DisplayName="Remove Unnesecary Data" sap:VirtualizedContainerService.HintSize="400,61" sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[strPdfData]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[System.Text.RegularExpressions.Regex.Replace(strPdfData,"(\d{1,2} \w+ \d{2,4} )","Date ")]</InArgument>
      </Assign.Value>
    </Assign>
    <Assign DisplayName="Remove Special Character" sap:VirtualizedContainerService.HintSize="400,61" sap2010:WorkflowViewState.IdRef="Assign_2">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[strPdfData]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[System.Text.RegularExpressions.Regex.Replace(strPdfData," "," ")]</InArgument>
      </Assign.Value>
    </Assign>
    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="400,25" sap2010:WorkflowViewState.IdRef="CommentOut_5">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="400,307" sap2010:WorkflowViewState.IdRef="Sequence_8">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Extract Reference and Amount from In - scope PDF" Code="Dim strtmp As String&#xA;&#x9;&#xA;If (CompanyCode=&quot;1031&quot; And (CustomerCode=&quot;3950&quot; Or CustomerCode=&quot;3949&quot;  Or CustomerCode=&quot;7136&quot; Or CustomerCode=&quot;44019&quot; Or CustomerCode=&quot;3951&quot;)) Then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Inv Date&quot;)).Trim&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Inv|Date&quot;,&quot;InvDate&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Internal|No&quot;,&quot;InternalNo&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Supplier|Ref&quot;,&quot;Reference&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Invoice|Amount&quot;,&quot;Amount&quot;)&#xA;End If&#xA;&#x9;&#xA;If(CompanyCode=&quot;1031&quot; And CustomerCode=&quot;7154&quot;) Then&#xA;&#x9;&#x9;&#xA;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Voucher Date Invoice&quot;)).Trim&#xA;&#x9;strtmp=strtmp.Replace(&quot;Description&quot;,&quot;&quot;)&#xA;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Inv|Date&quot;,&quot;InvDate&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Internal|No&quot;,&quot;InternalNo&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Invoice&quot;,&quot;Reference&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Invoice|Amount&quot;,&quot;InvoiceAmount&quot;)&#xA;&#x9;strpar = strtmp.Substring(0, strtmp.IndexOf(Environment.NewLine)).Trim&#xA;End If&#xA;&#xA;If(CompanyCode=&quot;1031&quot; And CustomerCode=&quot;16772&quot;) Then&#xA;&#x9;&#x9;&#xA;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Date Type Reference&quot;)).Trim&#xA;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xA;&#x9;strpar = strtmp.Substring(0, strtmp.IndexOf(Environment.NewLine)).Trim&#xA;End If&#xA;&#xA;If (CompanyCode=&quot;1031&quot; And (CustomerCode=&quot;1061&quot; Or CustomerCode=&quot;62704&quot;)) Then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Document Invoice Date Gross amount Deductions Net amount&quot;)).Trim&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;PO Number Delivery/Ref PO Amount&quot;,&quot;&quot;)&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Gross|amount&quot;,&quot;GrossAmount&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Net|amount&quot;,&quot;Amount&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Invoice&quot;,&quot;Reference&quot;)&#xA;&#x9;End If&#xA;&#x9;&#xA;If (CompanyCode=&quot;1031&quot; And CustomerCode=&quot;70522&quot;) Then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Invoice Number Invoice Date Reference&quot;)).Trim&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;Before Tax Taken Amount&quot;,&quot;&quot;)&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Invoice|Number&quot;,&quot;Reference&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Invoice|Date&quot;,&quot;InvoiceDate&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Reference|Amount|Discount&quot;,&quot;ReferenceAmount&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Amount|Tax&quot;,&quot;AmountTax&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Net|Payment&quot;,&quot;Amount&quot;)&#xA;&#x9;End If&#xA;&#x9;&#xA;&#x9;If (CompanyCode=&quot;1031&quot; And CustomerCode=&quot;82834&quot;) Then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Voucher Date Invoice Description Type Amount&quot;)).Trim&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;Description&quot;,&quot;&quot;)&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Invoice&quot;,&quot;Reference&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;$&quot;,&quot;&quot;)&#xA;&#x9;&#x9;&#xA;End If&#xA;&#x9;&#xA;If (CompanyCode=&quot;1031&quot; And CustomerCode=&quot;6588&quot;) Then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Type Number Date Currency Amount Tax Amount Amount Paid&quot;)).Trim&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Number&quot;,&quot;Reference&quot;)&#xA;&#x9;    strout=strout.Replace(&quot;Amount&quot;,&quot;amount&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Paid&quot;,&quot;Amount&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;amount|amount&quot;,&quot;zeroAmount&quot;)&#xA;End If&#xA;&#xA;If (CompanyCode=&quot;1031&quot; And (CustomerCode=&quot;86207&quot; Or CustomerCode=&quot;58115&quot; Or CustomerCode=&quot;9469&quot; Or CustomerCode=&quot;55714&quot; Or CustomerCode=&quot;5970&quot; Or CustomerCode=&quot;9469&quot; Or CustomerCode=&quot;1500&quot; )) Then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Date Type Reference Details Amount Balance&quot;)).Trim&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;RETAINED &quot;,&quot;&quot;)&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;RETAINED&quot;,&quot;&quot;)&#xA;&#x9;&#xA;End If&#xA;&#xA;If (CompanyCode=&quot;1031&quot; And CustomerCode=&quot;42958&quot;) Then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Invoice Date Description Amount Discount Net Amount&quot;)).Trim&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;Description&quot;,&quot;&quot;)&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;AUD&quot;,&quot;&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Amount&quot;,&quot;amount&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Invoice&quot;,&quot;Reference&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Net|amount&quot;,&quot;Amount&quot;)&#xA;&#x9;&#xA;End If&#xA;&#xA;If (CompanyCode=&quot;1031&quot; And (CustomerCode=&quot;83513&quot;  Or CustomerCode=&quot;9468&quot; Or CustomerCode=&quot;1500&quot;)) Then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Date Type&quot;)).Trim&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;EFT Pay:&quot;,&quot;&quot;)&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Invoice|Number&quot;,&quot;Reference&quot;)&#xA;&#x9;&#xA;End If&#xA;&#xA;If (CompanyCode=&quot;1031&quot; And CustomerCode=&quot;15129&quot;) Then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Document Your Document Date Cash Discounts Gross Amount Currency&quot;)).Trim&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;Description&quot;,&quot;&quot;)&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Your|Document&quot;,&quot;Reference&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Gross|Amount&quot;,&quot;Amount&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Cash|Discounts&quot;,&quot;Discounts&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;$&quot;,&quot;&quot;)&#xA;&#x9;&#xA;End If&#xA;&#xA;If (CompanyCode=&quot;1031&quot; And (CustomerCode=&quot;74024&quot; Or CustomerCode=&quot;6974&quot;)) Then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Console.WriteLine(&quot;test&quot;)&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Reference Ref Date Gross Amount Deduction Discount Deduction PAYG Payment Amount&quot;)).Trim&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Ref|Date&quot;,&quot;Date&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Gross|Amount&quot;,&quot;Gross&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Deduction|Discount|Deduction|PAYG&quot;,&quot;Discounts&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Payment|Amount&quot;,&quot;Amount&quot;)&#xA;&#x9;&#xA;End If&#xA;&#xA;If (CompanyCode=&quot;1031&quot; And CustomerCode=&quot;70867&quot;) Then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Document Invoice Invoice Gross amount Cash Nett Amount&quot;)).Trim&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;Number Date Discount&quot;,&quot;&quot;)&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Invoice&quot;,&quot;Reference&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Reference|Gross&quot;,&quot;Date&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;amount&quot;,&quot;Gross&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Nett|Amount&quot;,&quot;Amount&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;End If&#xA;&#x9;&#xA;&#x9;If (CompanyCode=&quot;1031&quot; And CustomerCode=&quot;2002&quot;) Then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Date Reference No. Description Amount&quot;)).Trim&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;Description&quot;,&quot;&quot;)&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Reference|No.&quot;,&quot;Reference&quot;)&#xA;&#x9;&#xA;End If&#xA;&#xA;If (CompanyCode=&quot;1031&quot; And CustomerCode=&quot;56919&quot;) Then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Tax Invoice Invoice date Payment reference Invoice amount Discount used Payment Currency&quot;)).Trim&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;Payment reference&quot;,&quot;&quot;)&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Tax|Invoice&quot;,&quot;Reference&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Invoice|date&quot;,&quot;Date&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Invoice|amount&quot;,&quot;InvoiceAmount&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Discount|used&quot;,&quot;DiscountUsed&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Payment&quot;,&quot;Amount&quot;)&#xA;&#x9;&#x9;&#xA;End If&#xA;&#xA;If (CompanyCode=&quot;1031&quot; And CustomerCode=&quot;62275&quot;) Then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;# Paid Doc. Doc. No. Date Reference Number Instalment ID Amount&quot;)).Trim&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;AP Invoice&quot;,&quot;APInvoice&quot;)&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;1 of 1&quot;,&quot;1of1&quot;)&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;AUD&quot;,&quot;&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;#&quot;,&quot;Sno&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Paid|Doc.&quot;,&quot;PaidDoc.&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Doc.|No.&quot;,&quot;DocNo&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Reference|Number&quot;,&quot;Reference&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Instalment|ID&quot;,&quot;InstalmentID&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Amount&quot;,&quot;Amount&quot;)&#xA;&#x9;&#xA;End If&#xA;&#xA;If (CompanyCode=&quot;1031&quot; And CustomerCode=&quot;82142&quot; ) Then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Your Ref Our Ref / Item Invoice Date Gross ADJ: Amount Paid&quot;)).Trim&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;Item Receipt Ref&quot;,&quot;&quot;)&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Your|Ref&quot;,&quot;Reference&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Our|Ref|/|Item|&quot;,&quot;&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Invoice|Date&quot;,&quot;Date&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;ADJ:&quot;,&quot;ADJ&quot;)&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Amount|Paid&quot;,&quot;Amount&quot;)&#xA;&#x9;End If&#xA;&#x9;&#xA;&#x9;If(CompanyCode=&quot;1059&quot; And CustomerCode=&quot;4269&quot;) Then&#xA;&#x9;&#x9;&#xA;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Invoice number Invoice date BAM Voucher Gross amount&quot;)).Trim&#xA;&#x9;strtmp=strtmp.Replace(&quot;number CIS discount&quot;,&quot;&quot;)&#xA;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Invoice|date&quot;,&quot;InvDate&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Invoice|number&quot;,&quot;Reference&quot;)&#xA;&#x9;strout=strout.Replace(&quot;BAM|Voucher&quot;,&quot;Voucher&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Gross|amount&quot;,&quot;GrossAmount&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Deducted|tax&quot;,&quot;DeductedTax&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Deducted|Paid&quot;,&quot;DeductedDiscount&quot;)&#xA;&#x9;strout=strout.Replace(&quot;amount&quot;,&quot;Amount&quot;)&#xA;&#x9;strpar = strtmp.Substring(0, strtmp.IndexOf(Environment.NewLine)).Trim&#xA;End If&#xA;&#xA;If(CompanyCode=&quot;1059&quot; And CustomerCode=&quot;3436&quot;) Then&#xA;&#x9;&#x9;&#xA;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Type Date Our Reference Your Reference Total Invoice&quot;)).Trim&#xA;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Our|Reference&quot;,&quot;OurReference&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Your|Reference&quot;,&quot;Reference&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Total|Invoice|Value&quot;,&quot;InvoiceValue&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Discount|Net&quot;,&quot;Discount&quot;)&#xA;&#x9;strpar = strtmp.Substring(0, strtmp.IndexOf(Environment.NewLine)).Trim&#xA;End If&#xA;&#xA;If(CompanyCode=&quot;1059&quot; And CustomerCode=&quot;3446&quot;) Then&#xA;&#x9;&#x9;&#xA;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Date Our Ref Your Ref Type Total Paid Discount&quot;)).Trim&#xA;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Our|Ref&quot;,&quot;OurRef&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Your|Ref&quot;,&quot;Reference&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Total|Invoice|Value&quot;,&quot;InvoiceValue&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Total&quot;,&quot;Amount&quot;)&#xA;&#x9;strpar = strtmp.Substring(0, strtmp.IndexOf(Environment.NewLine)).Trim&#xA;End If&#xA;&#xA;&#x9;If(CompanyCode=&quot;1059&quot; And CustomerCode=&quot;3479&quot;) Then&#xA;&#x9;&#x9;&#xA;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Date Description Orig. Amt Amt Due Discount Applied Amt&quot;)).Trim&#xA;&#x9;strtmp=strtmp.Replace(&quot;Bill &quot;,&quot;&quot;)&#xA;&#x9;strtmp=strtmp.Replace(&quot;Discount&quot;,&quot;&quot;)&#xA;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Orig.|Amt&quot;,&quot;InvDate&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Description&quot;,&quot;Reference&quot;)&#xA;&#x9;strout=strout.Replace(&quot;#&quot;,&quot;&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Due|Applied|Amt&quot;,&quot;Amount&quot;)&#xA;&#x9;strpar = strtmp.Substring(0, strtmp.IndexOf(Environment.NewLine)).Trim&#xA;End If&#xA;&#xA;If(CompanyCode=&quot;1059&quot; And CustomerCode=&quot;85361&quot;) Then&#xA;&#x9;&#x9;&#xA;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Our Ref Your Ref Date Due Date Amount Paid Total&quot;)).Trim&#xA;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Our|Ref&quot;,&quot;OurRef&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Your|Ref&quot;,&quot;Reference&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Due|Date&quot;,&quot;DueDate&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Amount|Paid&quot;,&quot;Amount&quot;)&#xA;&#x9;strpar = strtmp.Substring(0, strtmp.IndexOf(Environment.NewLine)).Trim&#xA;End If&#xA;&#xA;If(CompanyCode=&quot;1059&quot; And CustomerCode=&quot;3453&quot;) Then&#xA;&#x9;&#x9;&#xA;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Date Invoice Reference Total amount&quot;)).Trim&#xA;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;&#xA;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Reference&quot;,&quot;Ref&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Invoice&quot;,&quot;Reference&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Total|amount&quot;,&quot;Amount&quot;)&#xA;&#x9;strpar = strtmp.Substring(0, strtmp.IndexOf(Environment.NewLine)).Trim&#xA;End If&#xA;&#xA;If(CompanyCode=&quot;1089&quot; And CustomerCode=&quot;9516&quot;) Then&#xA;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Date Reference Details Vatable/Exempt VAT Gross EWT Net Amt Payable&quot;)).Trim&#xA;&#x9;Dim first As Boolean = True&#xA;&#x9;For Each line As String In  strtmp.Split(New String() {Environment.NewLine},StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;&#x9;If first Then&#xA;&#x9;&#x9;&#x9;first = False&#xA;&#x9;&#x9;&#x9;Dim values = line.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;) + Environment.NewLine&#xA;&#x9;&#x9;&#x9;Console.WriteLine(strout)&#xA;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;line=Regex.Replace(line,&quot;[a-zA-Z]*&quot;,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;line=line.Replace(&quot;/&quot;,&quot;&quot;)&#xA;&#x9;&#x9;&#x9;Dim values = line.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xA;&#x9;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xA;&#x9;&#x9;&#x9;strout = strout+result.Replace(&quot; &quot;, &quot;|&quot;) + Environment.NewLine&#xA;&#x9;&#x9;&#x9;Console.WriteLine(strout)&#xA;&#x9;&#x9;End If&#xA;&#x9;Next&#xA;&#x9;strout = strout.Replace(&quot; &quot;, &quot;|&quot;)&#xA;&#x9;strout=strout.Replace(&quot;Net|Amt|Payable&quot;,&quot;Amount&quot;)&#xA;&#x9;strpar = strtmp.Substring(0, strtmp.IndexOf(Environment.NewLine)).Trim&#xA;End If" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="338,196" sap2010:WorkflowViewState.IdRef="InvokeCode_5">
            <ui:InvokeCode.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="strin">[strPdfData]</InArgument>
              <OutArgument x:TypeArguments="x:String" x:Key="strout">[strExtractedData]</OutArgument>
              <OutArgument x:TypeArguments="x:String" x:Key="strpar">[strTemp]</OutArgument>
              <InArgument x:TypeArguments="x:String" x:Key="CompanyCode">[in_strCompanyCode]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="CustomerCode">[in_strCustomerCode]</InArgument>
            </ui:InvokeCode.Arguments>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:InvokeCode>
        </Sequence>
      </ui:CommentOut.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:CommentOut>
    <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Extract Reference and Amount from In - scope PDF" Code="Dim strtmp As String&#xD;&#xA;&#x9;&#xD;&#xA;If (CompanyCode=&quot;1031&quot; And (CustomerCode=&quot;3950&quot; Or CustomerCode=&quot;3949&quot;  Or CustomerCode=&quot;7136&quot; Or CustomerCode=&quot;44019&quot; Or CustomerCode=&quot;3951&quot;)) Then&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Inv Date&quot;)).Trim&#xD;&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Inv|Date&quot;,&quot;InvDate&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Internal|No&quot;,&quot;InternalNo&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Supplier|Ref&quot;,&quot;Reference&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Invoice|Amount&quot;,&quot;Amount&quot;)&#xD;&#xA;End If&#xD;&#xA;&#x9;&#xD;&#xA;If(CompanyCode=&quot;1031&quot; And CustomerCode=&quot;7154&quot;) Then&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Voucher Date Invoice&quot;)).Trim&#xD;&#xA;&#x9;strtmp=strtmp.Replace(&quot;Description&quot;,&quot;&quot;)&#xD;&#xA;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Inv|Date&quot;,&quot;InvDate&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Internal|No&quot;,&quot;InternalNo&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Invoice&quot;,&quot;Reference&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Invoice|Amount&quot;,&quot;InvoiceAmount&quot;)&#xD;&#xA;&#x9;strpar = strtmp.Substring(0, strtmp.IndexOf(Environment.NewLine)).Trim&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;If(CompanyCode=&quot;1031&quot; And CustomerCode=&quot;16772&quot;) Then&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Date Type Reference&quot;)).Trim&#xD;&#xA;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xD;&#xA;&#x9;strpar = strtmp.Substring(0, strtmp.IndexOf(Environment.NewLine)).Trim&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;If (CompanyCode=&quot;1031&quot; And (CustomerCode=&quot;1061&quot; Or CustomerCode=&quot;62704&quot;)) Then&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Document Invoice Date Gross amount Deductions Net amount&quot;)).Trim&#xD;&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;PO Number Delivery/Ref PO Amount&quot;,&quot;&quot;)&#xD;&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Gross|amount&quot;,&quot;GrossAmount&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Net|amount&quot;,&quot;Amount&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Invoice&quot;,&quot;Reference&quot;)&#xD;&#xA;&#x9;End If&#xD;&#xA;&#x9;&#xD;&#xA;If (CompanyCode=&quot;1031&quot; And CustomerCode=&quot;70522&quot;) Then&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Invoice Number Invoice Date Reference&quot;)).Trim&#xD;&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;Before Tax Taken Amount&quot;,&quot;&quot;)&#xD;&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Invoice|Number&quot;,&quot;Reference&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Invoice|Date&quot;,&quot;InvoiceDate&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Reference|Amount|Discount&quot;,&quot;ReferenceAmount&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Amount|Tax&quot;,&quot;AmountTax&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Net|Payment&quot;,&quot;Amount&quot;)&#xD;&#xA;&#x9;End If&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;If (CompanyCode=&quot;1031&quot; And CustomerCode=&quot;82834&quot;) Then&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Voucher Date Invoice Description Type Amount&quot;)).Trim&#xD;&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;Description&quot;,&quot;&quot;)&#xD;&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Invoice&quot;,&quot;Reference&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;$&quot;,&quot;&quot;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;End If&#xD;&#xA;&#x9;&#xD;&#xA;If (CompanyCode=&quot;1031&quot; And CustomerCode=&quot;6588&quot;) Then&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Type Number Date Currency Amount Tax Amount Amount Paid&quot;)).Trim&#xD;&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Number&quot;,&quot;Reference&quot;)&#xD;&#xA;&#x9;    strout=strout.Replace(&quot;Amount&quot;,&quot;amount&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Paid&quot;,&quot;Amount&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;amount|amount&quot;,&quot;zeroAmount&quot;)&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;If (CompanyCode=&quot;1031&quot; And (CustomerCode=&quot;86207&quot; Or CustomerCode=&quot;58115&quot; Or CustomerCode=&quot;9469&quot; Or CustomerCode=&quot;55714&quot; Or CustomerCode=&quot;5970&quot; Or CustomerCode=&quot;9469&quot; Or CustomerCode=&quot;1500&quot; )) Then&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Date Type Reference Details Amount Balance&quot;)).Trim&#xD;&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;RETAINED &quot;,&quot;&quot;)&#xD;&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;RETAINED&quot;,&quot;&quot;)&#xD;&#xA;&#x9;&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;If (CompanyCode=&quot;1031&quot; And CustomerCode=&quot;42958&quot;) Then&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Invoice Date Description Amount Discount Net Amount&quot;)).Trim&#xD;&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;Description&quot;,&quot;&quot;)&#xD;&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;AUD&quot;,&quot;&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Amount&quot;,&quot;amount&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Invoice&quot;,&quot;Reference&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Net|amount&quot;,&quot;Amount&quot;)&#xD;&#xA;&#x9;&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;If (CompanyCode=&quot;1031&quot; And (CustomerCode=&quot;83513&quot;  Or CustomerCode=&quot;9468&quot; Or CustomerCode=&quot;1500&quot;)) Then&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Date Type&quot;)).Trim&#xD;&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;EFT Pay:&quot;,&quot;&quot;)&#xD;&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Invoice|Number&quot;,&quot;Reference&quot;)&#xD;&#xA;&#x9;&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;If (CompanyCode=&quot;1031&quot; And CustomerCode=&quot;15129&quot;) Then&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Document Your Document Date Cash Discounts Gross Amount Currency&quot;)).Trim&#xD;&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;Description&quot;,&quot;&quot;)&#xD;&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Your|Document&quot;,&quot;Reference&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Gross|Amount&quot;,&quot;Amount&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Cash|Discounts&quot;,&quot;Discounts&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;$&quot;,&quot;&quot;)&#xD;&#xA;&#x9;&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;If (CompanyCode=&quot;1031&quot; And (CustomerCode=&quot;74024&quot; Or CustomerCode=&quot;6974&quot;)) Then&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Reference Ref Date Gross Amount Deduction Discount Deduction PAYG Payment Amount&quot;)).Trim&#xD;&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Ref|Date&quot;,&quot;Date&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Gross|Amount&quot;,&quot;Gross&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Deduction|Discount|Deduction|PAYG&quot;,&quot;Discounts&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Payment|Amount&quot;,&quot;Amount&quot;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;result=&quot;&quot;&#xD;&#xA;&#x9;&#x9;For Each line As String In  strout.Split(New String() {Environment.NewLine},StringSplitOptions.RemoveEmptyEntries)&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;If(Regex.IsMatch(line,&quot;\.[0-9]{3}&quot;)) Then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Dim temp As String = Regex.Match(line, &quot;\.[0-9]{3}&quot;).Value&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Dim FirstCharacter As Integer = line.IndexOf(temp)+3         &#xD;&#xA;            &#x9;Dim testLen As Integer = Len(line)&#xD;&#xA;            &#x9;line=line.Substring(0,FirstCharacter)+Environment.NewLine+line.Substring(FirstCharacter)&#xD;&#xA;&#x9;&#x9;&#x9;End If&#xD;&#xA;&#x9;&#x9;&#x9;result = result +Environment.NewLine+ line&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;Next&#xD;&#xA;&#x9;&#x9;strout=&quot;&quot;&#xD;&#xA;&#x9;&#x9;strout=result&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;If (CompanyCode=&quot;1031&quot; And CustomerCode=&quot;70867&quot;) Then&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Document Invoice Invoice Gross amount Cash Nett Amount&quot;)).Trim&#xD;&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;Number Date Discount&quot;,&quot;&quot;)&#xD;&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Invoice&quot;,&quot;Reference&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Reference|Gross&quot;,&quot;Date&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;amount&quot;,&quot;Gross&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Nett|Amount&quot;,&quot;Amount&quot;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;End If&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;If (CompanyCode=&quot;1031&quot; And CustomerCode=&quot;2002&quot;) Then&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Date Reference No. Description Amount&quot;)).Trim&#xD;&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;Description&quot;,&quot;&quot;)&#xD;&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Reference|No.&quot;,&quot;Reference&quot;)&#xD;&#xA;&#x9;&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;If (CompanyCode=&quot;1031&quot; And CustomerCode=&quot;56919&quot;) Then&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Tax Invoice Invoice date Payment reference Invoice amount Discount used Payment Currency&quot;)).Trim&#xD;&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;Payment reference&quot;,&quot;&quot;)&#xD;&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Tax|Invoice&quot;,&quot;Reference&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Invoice|date&quot;,&quot;Date&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Invoice|amount&quot;,&quot;InvoiceAmount&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Discount|used&quot;,&quot;DiscountUsed&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Payment&quot;,&quot;Amount&quot;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;If (CompanyCode=&quot;1031&quot; And CustomerCode=&quot;62275&quot;) Then&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;# Paid Doc. Doc. No. Date Reference Number Instalment ID Amount&quot;)).Trim&#xD;&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;AP Invoice&quot;,&quot;APInvoice&quot;)&#xD;&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;1 of 1&quot;,&quot;1of1&quot;)&#xD;&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;AUD&quot;,&quot;&quot;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;#&quot;,&quot;Sno&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Paid|Doc.&quot;,&quot;PaidDoc.&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Doc.|No.&quot;,&quot;DocNo&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Reference|Number&quot;,&quot;Reference&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Instalment|ID&quot;,&quot;InstalmentID&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Amount&quot;,&quot;Amount&quot;)&#xD;&#xA;&#x9;&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;If (CompanyCode=&quot;1031&quot; And CustomerCode=&quot;82142&quot; ) Then&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Your Ref Our Ref / Item Invoice Date Gross ADJ: Amount Paid&quot;)).Trim&#xD;&#xA;&#x9;&#x9;strtmp=strtmp.Replace(&quot;Item Receipt Ref&quot;,&quot;&quot;)&#xD;&#xA;&#x9;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Your|Ref&quot;,&quot;Reference&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Our|Ref|/|Item|&quot;,&quot;&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Invoice|Date&quot;,&quot;Date&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;ADJ:&quot;,&quot;ADJ&quot;)&#xD;&#xA;&#x9;&#x9;strout=strout.Replace(&quot;Amount|Paid&quot;,&quot;Amount&quot;)&#xD;&#xA;&#x9;End If&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;If(CompanyCode=&quot;1059&quot; And CustomerCode=&quot;4269&quot;) Then&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Invoice number Invoice date BAM Voucher Gross amount&quot;)).Trim&#xD;&#xA;&#x9;strtmp=strtmp.Replace(&quot;number CIS discount&quot;,&quot;&quot;)&#xD;&#xA;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Invoice|date&quot;,&quot;InvDate&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Invoice|number&quot;,&quot;Reference&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;BAM|Voucher&quot;,&quot;Voucher&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Gross|amount&quot;,&quot;GrossAmount&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Deducted|tax&quot;,&quot;DeductedTax&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Deducted|Paid&quot;,&quot;DeductedDiscount&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;amount&quot;,&quot;Amount&quot;)&#xD;&#xA;&#x9;strpar = strtmp.Substring(0, strtmp.IndexOf(Environment.NewLine)).Trim&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;If(CompanyCode=&quot;1059&quot; And CustomerCode=&quot;3436&quot;) Then&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Type Date Our Reference Your Reference Total Invoice&quot;)).Trim&#xD;&#xA;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Our|Reference&quot;,&quot;OurReference&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Your|Reference&quot;,&quot;Reference&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Total|Invoice|Value&quot;,&quot;InvoiceValue&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Discount|Net&quot;,&quot;Discount&quot;)&#xD;&#xA;&#x9;strpar = strtmp.Substring(0, strtmp.IndexOf(Environment.NewLine)).Trim&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;If(CompanyCode=&quot;1059&quot; And CustomerCode=&quot;3446&quot;) Then&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Date Our Ref Your Ref Type Total Paid Discount&quot;)).Trim&#xD;&#xA;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Our|Ref&quot;,&quot;OurRef&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Your|Ref&quot;,&quot;Reference&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Total|Invoice|Value&quot;,&quot;InvoiceValue&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Total&quot;,&quot;Amount&quot;)&#xD;&#xA;&#x9;strpar = strtmp.Substring(0, strtmp.IndexOf(Environment.NewLine)).Trim&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;&#x9;If(CompanyCode=&quot;1059&quot; And CustomerCode=&quot;3479&quot;) Then&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Date Description Orig. Amt Amt Due Discount Applied Amt&quot;)).Trim&#xD;&#xA;&#x9;strtmp=strtmp.Replace(&quot;Bill &quot;,&quot;&quot;)&#xD;&#xA;&#x9;strtmp=strtmp.Replace(&quot;Discount&quot;,&quot;&quot;)&#xD;&#xA;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Orig.|Amt&quot;,&quot;InvDate&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Description&quot;,&quot;Reference&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;#&quot;,&quot;&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Due|Applied|Amt&quot;,&quot;Amount&quot;)&#xD;&#xA;&#x9;strpar = strtmp.Substring(0, strtmp.IndexOf(Environment.NewLine)).Trim&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;If(CompanyCode=&quot;1059&quot; And CustomerCode=&quot;85361&quot;) Then&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Our Ref Your Ref Date Due Date Amount Paid Total&quot;)).Trim&#xD;&#xA;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Our|Ref&quot;,&quot;OurRef&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Your|Ref&quot;,&quot;Reference&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Due|Date&quot;,&quot;DueDate&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Amount|Paid&quot;,&quot;Amount&quot;)&#xD;&#xA;&#x9;strpar = strtmp.Substring(0, strtmp.IndexOf(Environment.NewLine)).Trim&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;If(CompanyCode=&quot;1059&quot; And CustomerCode=&quot;3453&quot;) Then&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Date Invoice Reference Total amount&quot;)).Trim&#xD;&#xA;&#x9;Dim values = strtmp.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Reference&quot;,&quot;Ref&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Invoice&quot;,&quot;Reference&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Total|amount&quot;,&quot;Amount&quot;)&#xD;&#xA;&#x9;strpar = strtmp.Substring(0, strtmp.IndexOf(Environment.NewLine)).Trim&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;If(CompanyCode=&quot;1089&quot; And CustomerCode=&quot;9516&quot;) Then&#xD;&#xA;&#x9;strtmp = strin.Substring(strin.IndexOf(&quot;Date Reference Details Vatable/Exempt VAT Gross EWT Net Amt Payable&quot;)).Trim&#xD;&#xA;&#x9;Dim first As Boolean = True&#xD;&#xA;&#x9;For Each line As String In  strtmp.Split(New String() {Environment.NewLine},StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;&#x9;If first Then&#xD;&#xA;&#x9;&#x9;&#x9;first = False&#xD;&#xA;&#x9;&#x9;&#x9;Dim values = line.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;&#x9;&#x9;strout = result.Replace(&quot; &quot;, &quot;|&quot;) + Environment.NewLine&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;Else&#xD;&#xA;&#x9;&#x9;&#x9;line=Regex.Replace(line,&quot;[a-zA-Z]*&quot;,&quot;&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;line=line.Replace(&quot;/&quot;,&quot;&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;Dim values = line.Split(New String() { &quot; &quot; }, StringSplitOptions.RemoveEmptyEntries)&#xD;&#xA;&#x9;&#x9;&#x9;Dim result = String.Join(&quot; &quot;, values)&#xD;&#xA;&#x9;&#x9;&#x9;strout = strout+result.Replace(&quot; &quot;, &quot;|&quot;) + Environment.NewLine&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;End If&#xD;&#xA;&#x9;Next&#xD;&#xA;&#x9;strout = strout.Replace(&quot; &quot;, &quot;|&quot;)&#xD;&#xA;&#x9;strout=strout.Replace(&quot;Net|Amt|Payable&quot;,&quot;Amount&quot;)&#xD;&#xA;&#x9;strpar = strtmp.Substring(0, strtmp.IndexOf(Environment.NewLine)).Trim&#xD;&#xA;End If" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="400,196" sap2010:WorkflowViewState.IdRef="InvokeCode_6">
      <ui:InvokeCode.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="strin">[strPdfData]</InArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="strout">[strExtractedData]</OutArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="strpar">[strTemp]</OutArgument>
        <InArgument x:TypeArguments="x:String" x:Key="CompanyCode">[in_strCompanyCode]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="CustomerCode">[in_strCustomerCode]</InArgument>
      </ui:InvokeCode.Arguments>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InvokeCode>
    <If sap2010:Annotation.AnnotationText="If Extracted Data is Null then PDF is out of scope" Condition="[String.IsNullOrEmpty(strExtractedData)]" sap:VirtualizedContainerService.HintSize="400,67" sap2010:WorkflowViewState.IdRef="If_1">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence sap:VirtualizedContainerService.HintSize="400,201" sap2010:WorkflowViewState.IdRef="Sequence_3">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Throw DisplayName="Throw BE" Exception="[new BusinessRuleException(&quot;Remit PDF is out of scope&quot;)]" sap:VirtualizedContainerService.HintSize="338,90" sap2010:WorkflowViewState.IdRef="Throw_1" />
        </Sequence>
      </If.Then>
    </If>
    <ui:GenerateDataTable ColumnSizes="{x:Null}" NewLineSeparator="{x:Null}" Positions="{x:Null}" sap2010:Annotation.AnnotationText="Converts String to DataTable. Delimiter used for Column Seperators - '|'" AutoDetectTypes="False" CSVParsing="True" ColumnSeparators="|" DataTable="[out_dt_References]" DisplayName="Generate Data Table" sap:VirtualizedContainerService.HintSize="400,243" sap2010:WorkflowViewState.IdRef="GenerateDataTable_1" Input="[strExtractedData]" UseColumnHeader="True">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:GenerateDataTable>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="400,92" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Info" Message="[&quot;Ended ExtractReferencesFromRemitPdf workflow&quot;]" />
  </Sequence>
</Activity>